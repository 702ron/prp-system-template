#!/bin/bashnn# PRP System Setup Scriptn# Run this script to quickly set up the PRP system in a new projectnnset -ennecho "🚀 Setting up PRP system..."nn# Create directoriesnmkdir -p PRPs/templatesnmkdir -p PRPs/ai_docsnmkdir -p PRPs/examplesnn# Create base PRP templatencat > PRPs/templates/prp_base.md << 'EOF'n# [Feature Name] - Product Requirement Promptnn## OverviewnBrief description of the feature or component to be developed.nn## Requirementsnn### Functional Requirementsn- [ ] Requirement 1n- [ ] Requirement 2nn### Non-Functional Requirementsn- Performance: [specifications]n- Security: [requirements]n- Accessibility: [standards]nn## Technical Specificationsnn### Technology Stackn- Frontend: [React/Vue/Angular/etc.]n- Backend: [Node.js/Python/Go/etc.]n- Database: [PostgreSQL/MongoDB/etc.]n- UI Library: [Tailwind/Material-UI/etc.]nn### Architecture Patternsn- State Management: [Redux/Zustand/Context/etc.]n- API Patterns: [REST/GraphQL/etc.]n- Database Patterns: [ORM/Query Builder/etc.]nn## All Needed Contextnn### AI Documentation (Recommended)n- **file**: PRPs/ai_docs/[relevant-pattern].mdn  **why**: [why this pattern is relevant]nn### Project Filesn- **file**: [path to relevant file]n  **why**: [why this file is important for context]nn### External Documentationn- **url**: [external documentation URL]n  **why**: [why this documentation is needed]nn## Implementation Notesnn### Critical Requirementsn- [ ] CRITICAL: [critical requirement]n- [ ] IMPORTANT: [important requirement]n- [ ] NOTE: [general note]nn### Implementation Stepsn1. [Step 1]n2. [Step 2]n3. [Step 3]nn## Expected Outputnn### Code Quality Standardsn- [ ] Follows project TypeScript conventionsn- [ ] Implements proper error handlingn- [ ] Includes comprehensive testingn- [ ] Follows accessibility guidelinesnn### Deliverablesn- [ ] Component/function implementationn- [ ] Unit testsn- [ ] Integration testsn- [ ] Documentation updatesnn## Success Criterian- [ ] Feature works as specifiedn- [ ] Code follows project patternsn- [ ] Tests pass with 80%+ coveragen- [ ] Performance meets requirementsn- [ ] Accessibility standards metnEOFnn# Create Python runner scriptncat > PRPs/run_prp.py << 'EOF'n#!/usr/bin/env python3n"""nPRP (Product Requirement Prompt) RunnernExecutes PRPs with AI assistance for consistent code generation.n"""nnimport sysnimport osnimport argparsenimport subprocessnfrom pathlib import Pathnndef read_prp_file(prp_path):n    """Read and parse PRP file."""n    try:n        with open(prp_path, 'r', encoding='utf-8') as f:n            return f.read()n    except FileNotFoundError:n        print(f"Error: PRP file '{prp_path}' not found.")n        sys.exit(1)n    except Exception as e:n        print(f"Error reading PRP file: {e}")n        sys.exit(1)nndef validate_prp_structure(prp_content):n    """Validate PRP has required sections."""n    required_sections = [n        "## Overview",n        "## Requirements", n        "## All Needed Context",n        "## Implementation Notes"n    ]n    n    missing_sections = []n    for section in required_sections:n        if section not in prp_content:n            missing_sections.append(section)n    n    if missing_sections:n        print("Warning: PRP missing required sections:")n        for section in missing_sections:n            print(f"  - {section}")n        return Falsen    return Truenndef run_with_ai(prp_content, ai_tool="claude"):n    """Execute PRP with AI tool."""n    print("🚀 Executing PRP with AI assistance...")n    print("=" * 50)n    n    # For Claude, you would integrate with their APIn    # For now, we'll just display the PRP contentn    print(prp_content)n    print("=" * 50)n    print("📝 AI execution complete. Review the generated code above.")n    print("💡 Tip: Copy the generated code to your project files.")nndef main():n    parser = argparse.ArgumentParser(description="Run PRP with AI assistance")n    parser.add_argument("prp_file", help="Path to PRP file")n    parser.add_argument("--ai-tool", default="claude", help="AI tool to use")n    parser.add_argument("--validate-only", action="store_true", help="Only validate PRP structure")n    n    args = parser.parse_args()n    n    # Read PRP filen    prp_content = read_prp_file(args.prp_file)n    n    # Validate structuren    if not validate_prp_structure(prp_content):n        if args.validate_only:n            print("❌ PRP validation failed.")n            sys.exit(1)n        else:n            print("⚠️  Continuing despite validation warnings...")n    n    if args.validate_only:n        print("✅ PRP validation passed.")n        returnn    n    # Execute with AIn    run_with_ai(prp_content, args.ai_tool)nnif __name__ == "__main__":n    main()nEOFnn# Create ai_docs READMEncat > PRPs/ai_docs/README.md << 'EOF'n# AI Documentation (ai_docs) - Project Patternsnn## OverviewnnThis directory contains curated documentation that provides AI with deep context about your project's implementation patterns. These documents help ensure consistent, production-ready code generation.nn## Documentation Structurenn### Technology-Specific Patternsn- `[technology]-patterns.md` - Core patterns for each technologyn- `[technology]-conventions.md` - Coding conventions and standardsn- `[technology]-best-practices.md` - Best practices and guidelinesnn### Feature-Specific Patternsn- `[feature]-patterns.md` - Patterns for specific featuresn- `[feature]-architecture.md` - Architecture patterns for featuresnn### Integration Patternsn- `[service]-integration.md` - External service integration patternsn- `api-patterns.md` - API design and consumption patternsnn## Usage in PRPsnnReference these documents in your PRPs:nn```markdownn## All Needed Contextnn### AI Documentation (Recommended)n- **file**: PRPs/ai_docs/react-patterns.mdn  **why**: Component structure and state management patternsn- **file**: PRPs/ai_docs/database-patterns.mdn  **why**: Database operations and query patternsn```nn## Creating New ai_docsnn### Template Structuren```markdownn# [Technology/Feature] Patternsnn## OverviewnBrief description of the patterns covered.nn## Core Patternsnn### Pattern 1: [Pattern Name]n```[language]n// Code examplen```nn### Pattern 2: [Pattern Name]n```[language]n// Code examplen```nn## Best Practicesn- [ ] Practice 1n- [ ] Practice 2nn## Common Pitfallsn- [ ] Pitfall 1 and how to avoid itn- [ ] Pitfall 2 and how to avoid itn```nn### When to Create New ai_docsn1. **New Technology**: When adding a new technology to the stackn2. **New Pattern**: When a successful pattern emergesn3. **Refactoring**: When consolidating multiple similar patternsn4. **Team Growth**: When onboarding new team membersnn## Maintenancenn### Regular Updatesn- Review ai_docs monthlyn- Update patterns as codebase evolvesn- Remove outdated patternsn- Add new successful patternsnn### Quality Assurancen- Ensure all code examples workn- Keep patterns consistent with actual codebasen- Cross-reference related patternsn- Validate patterns with team reviewnEOFnn# Create main PRP READMEncat > PRPs/README.md << 'EOF'n# PRP (Product Requirement Prompt) Systemnn## OverviewnnThis project uses a PRP system for AI-assisted development. PRPs are structured prompts that provide comprehensive context to AI for generating production-ready code.nn## Quick Startnn1. **Create a PRP**: Copy the base templaten   ```bashn   cp PRPs/templates/prp_base.md PRPs/my-feature.mdn   ```nn2. **Edit the PRP**: Fill in your requirements and contextnn3. **Run with AI**: Execute the PRPn   ```bashn   python PRPs/run_prp.py PRPs/my-feature.mdn   ```nn## PRP Structurenn```nPRPs/n├── templates/n│   └── prp_base.md          # Base template for all PRPsn├── ai_docs/                 # Curated documentation for AI contextn│   ├── README.md            # Index and usage guiden│   └── [technology]-patterns.mdn├── examples/                # Example PRPsn└── run_prp.py              # Python runner scriptn```nn## Using ai_docsnnThe `ai_docs/` directory contains curated documentation that provides AI with deep context about your project's implementation patterns.nn### Reference ai_docs in PRPs:n```markdownn## All Needed Contextnn### AI Documentation (Recommended)n- **file**: PRPs/ai_docs/react-patterns.mdn  **why**: Component structure and state management patternsn```nn## Best Practicesnn1. **Be specific**: Include exact patterns and function namesn2. **Reference ai_docs**: Always include relevant documentationn3. **Iterate**: Refine PRPs based on AI output qualityn4. **Document**: Keep PRPs updated as requirements changenn## Examplesnn- [Example PRP with ai_docs](example-with-ai-docs.md)nn## Documentationnn- [AI Documentation Guide](ai_docs/README.md)n- [Setup Guide](../scripts/setup-guide.md)nEOFnn# Make runner executablenchmod +x PRPs/run_prp.pynnecho "✅ PRP system setup complete!"necho ""necho "📝 Next steps:"necho "  1. Run: python scripts/detect-tech-stack.py"necho "  2. Create suggested ai_docs files"necho "  3. Create your first PRP: cp PRPs/templates/prp_base.md PRPs/my-feature.md"necho "  4. Edit the PRP and run: python PRPs/run_prp.py PRPs/my-feature.md"necho ""necho "📚 Documentation:"necho "  - PRPs/README.md - Main PRP guide"necho "  - PRPs/ai_docs/README.md - AI documentation guide"necho "  - scripts/setup-guide.md - Detailed setup guide"