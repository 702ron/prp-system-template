#!/usr/bin/env python3n"""nDetect project technology stack and suggest ai_docs to create.n"""nnimport osnimport jsonnfrom pathlib import Pathnndef detect_tech_stack():n    """Detect technology stack from project files."""n    tech_stack = {n        'frontend': [],n        'backend': [],n        'database': [],n        'tools': []n    }n    n    # Check for package.json (Node.js/React/Vue/Angular)n    if os.path.exists('package.json'):n        with open('package.json', 'r') as f:n            package_data = json.load(f)n            dependencies = package_data.get('dependencies', {})n            dev_dependencies = package_data.get('devDependencies', {})n            all_deps = {**dependencies, **dev_dependencies}n            n            # Frontend frameworksn            if 'react' in all_deps:n                tech_stack['frontend'].append('React')n            if 'vue' in all_deps:n                tech_stack['frontend'].append('Vue')n            if 'angular' in all_deps:n                tech_stack['frontend'].append('Angular')n            if 'next' in all_deps:n                tech_stack['frontend'].append('Next.js')n            if 'nuxt' in all_deps:n                tech_stack['frontend'].append('Nuxt.js')n            n            # UI librariesn            if 'tailwindcss' in all_deps:n                tech_stack['frontend'].append('Tailwind CSS')n            if '@mui/material' in all_deps:n                tech_stack['frontend'].append('Material-UI')n            if '@chakra-ui/react' in all_deps:n                tech_stack['frontend'].append('Chakra UI')n            if 'antd' in all_deps:n                tech_stack['frontend'].append('Ant Design')n            n            # State managementn            if 'redux' in all_deps:n                tech_stack['frontend'].append('Redux')n            if 'zustand' in all_deps:n                tech_stack['frontend'].append('Zustand')n            if '@tanstack/react-query' in all_deps:n                tech_stack['frontend'].append('TanStack Query')n            n            # Backend frameworksn            if 'express' in all_deps:n                tech_stack['backend'].append('Express')n            if 'fastify' in all_deps:n                tech_stack['backend'].append('Fastify')n            if 'koa' in all_deps:n                tech_stack['backend'].append('Koa')n            if 'nest' in all_deps:n                tech_stack['backend'].append('NestJS')n            n            # TypeScriptn            if 'typescript' in all_deps:n                tech_stack['tools'].append('TypeScript')n    n    # Check for Python files and requirementsn    if any(Path('.').glob('*.py')):n        tech_stack['backend'].append('Python')n    n    if os.path.exists('requirements.txt'):n        with open('requirements.txt', 'r') as f:n            requirements = f.read().lower()n            if 'django' in requirements:n                tech_stack['backend'].append('Django')n            if 'flask' in requirements:n                tech_stack['backend'].append('Flask')n            if 'fastapi' in requirements:n                tech_stack['backend'].append('FastAPI')n            if 'celery' in requirements:n                tech_stack['backend'].append('Celery')n    n    # Check for pyproject.tomln    if os.path.exists('pyproject.toml'):n        tech_stack['backend'].append('Python')n    n    # Check for Go filesn    if any(Path('.').glob('*.go')):n        tech_stack['backend'].append('Go')n    n    # Check for Rust filesn    if any(Path('.').glob('*.rs')) or os.path.exists('Cargo.toml'):n        tech_stack['backend'].append('Rust')n    n    # Check for database filesn    if os.path.exists('supabase'):n        tech_stack['database'].append('Supabase')n    if os.path.exists('prisma'):n        tech_stack['database'].append('Prisma')n    if os.path.exists('migrations'):n        tech_stack['database'].append('Database Migrations')n    if any(Path('.').glob('*.sql')):n        tech_stack['database'].append('SQL')n    n    # Check for specific database filesn    if os.path.exists('docker-compose.yml'):n        with open('docker-compose.yml', 'r') as f:n            content = f.read().lower()n            if 'postgres' in content:n                tech_stack['database'].append('PostgreSQL')n            if 'mysql' in content:n                tech_stack['database'].append('MySQL')n            if 'mongodb' in content:n                tech_stack['database'].append('MongoDB')n            if 'redis' in content:n                tech_stack['database'].append('Redis')n    n    # Check for build toolsn    if os.path.exists('vite.config.js') or os.path.exists('vite.config.ts'):n        tech_stack['tools'].append('Vite')n    if os.path.exists('webpack.config.js'):n        tech_stack['tools'].append('Webpack')n    if os.path.exists('rollup.config.js'):n        tech_stack['tools'].append('Rollup')n    n    # Check for testing frameworksn    if os.path.exists('jest.config.js') or 'jest' in tech_stack.get('tools', []):n        tech_stack['tools'].append('Jest')n    if os.path.exists('cypress.config.js'):n        tech_stack['tools'].append('Cypress')n    if os.path.exists('playwright.config.js'):n        tech_stack['tools'].append('Playwright')n    n    return tech_stacknndef suggest_ai_docs(tech_stack):n    """Suggest ai_docs to create based on tech stack."""n    suggestions = []n    n    # Frontend suggestionsn    for frontend in tech_stack['frontend']:n        if frontend == 'React':n            suggestions.extend([n                'react-typescript-conventions.md',n                'react-hooks-patterns.md',n                'react-component-patterns.md'n            ])n        elif frontend == 'Vue':n            suggestions.extend([n                'vue-composition-patterns.md',n                'vue-options-patterns.md'n            ])n        elif frontend == 'Angular':n            suggestions.extend([n                'angular-patterns.md',n                'angular-services-patterns.md'n            ])n        elif frontend == 'Next.js':n            suggestions.extend([n                'nextjs-patterns.md',n                'nextjs-routing-patterns.md'n            ])n        elif frontend == 'Tailwind CSS':n            suggestions.append('tailwind-patterns.md')n        elif frontend == 'Material-UI':n            suggestions.append('mui-patterns.md')n        elif frontend == 'Redux':n            suggestions.append('redux-patterns.md')n        elif frontend == 'Zustand':n            suggestions.append('zustand-patterns.md')n        elif frontend == 'TanStack Query':n            suggestions.append('react-query-patterns.md')n    n    # Backend suggestionsn    for backend in tech_stack['backend']:n        if backend == 'Express':n            suggestions.extend([n                'express-patterns.md',n                'nodejs-patterns.md',n                'express-middleware-patterns.md'n            ])n        elif backend == 'NestJS':n            suggestions.extend([n                'nestjs-patterns.md',n                'nestjs-module-patterns.md'n            ])n        elif backend == 'Django':n            suggestions.extend([n                'django-patterns.md',n                'django-models-patterns.md',n                'django-views-patterns.md'n            ])n        elif backend == 'Flask':n            suggestions.extend([n                'flask-patterns.md',n                'flask-blueprint-patterns.md'n            ])n        elif backend == 'FastAPI':n            suggestions.extend([n                'fastapi-patterns.md',n                'fastapi-dependency-patterns.md'n            ])n        elif backend == 'Go':n            suggestions.extend([n                'go-patterns.md',n                'go-http-patterns.md'n            ])n        elif backend == 'Rust':n            suggestions.extend([n                'rust-patterns.md',n                'rust-web-patterns.md'n            ])n    n    # Database suggestionsn    for database in tech_stack['database']:n        if database == 'Supabase':n            suggestions.extend([n                'supabase-patterns.md',n                'supabase-auth-patterns.md',n                'supabase-realtime-patterns.md'n            ])n        elif database == 'Prisma':n            suggestions.extend([n                'prisma-patterns.md',n                'prisma-migration-patterns.md'n            ])n        elif database == 'PostgreSQL':n            suggestions.append('postgresql-patterns.md')n        elif database == 'MongoDB':n            suggestions.append('mongodb-patterns.md')n        elif database == 'Redis':n            suggestions.append('redis-patterns.md')n    n    # Tool suggestionsn    for tool in tech_stack['tools']:n        if tool == 'TypeScript':n            suggestions.append('typescript-patterns.md')n        elif tool == 'Vite':n            suggestions.append('vite-patterns.md')n        elif tool == 'Jest':n            suggestions.append('jest-testing-patterns.md')n        elif tool == 'Cypress':n            suggestions.append('cypress-testing-patterns.md')n    n    # Remove duplicates and returnn    return list(set(suggestions))nndef create_ai_docs_files(suggestions):n    """Create the suggested ai_docs files with basic templates."""n    created_files = []n    n    for suggestion in suggestions:n        file_path = f"PRPs/ai_docs/{suggestion}"n        if not os.path.exists(file_path):n            # Create basic template based on file namen            template = create_basic_template(suggestion)n            n            with open(file_path, 'w') as f:n                f.write(template)n            n            created_files.append(file_path)n    n    return created_filesnndef create_basic_template(filename):n    """Create a basic template for ai_docs files."""n    name = filename.replace('.md', '').replace('-', ' ').title()n    n    return f"""# {name}nn## OverviewnnBrief description of the patterns covered in this document.nn## Core Patternsnn### Pattern 1: [Pattern Name]n```typescriptn// Code examplen```nn### Pattern 2: [Pattern Name]n```typescriptn// Code examplen```nn## Best Practicesn- [ ] Practice 1n- [ ] Practice 2nn## Common Pitfallsn- [ ] Pitfall 1 and how to avoid itn- [ ] Pitfall 2 and how to avoid itnn## Related Patternsn- Link to related ai_docs filesn- Cross-reference with other patternsnn## Examplesn- Real-world examples from your codebasen- Common use cases and implementationsn"""nndef main():n    print("🔍 Detecting technology stack...")n    tech_stack = detect_tech_stack()n    n    print("\n📋 Detected Technology Stack:")n    for category, technologies in tech_stack.items():n        if technologies:n            print(f"  {category.title()}: {', '.join(technologies)}")n    n    suggestions = suggest_ai_docs(tech_stack)n    n    print(f"\n📝 Suggested ai_docs to create:")n    for suggestion in suggestions:n        print(f"  - PRPs/ai_docs/{suggestion}")n    n    if suggestions:n        print(f"\n💡 Would you like to create these ai_docs files? (y/n): ", end="")n        response = input().lower().strip()n        n        if response in ['y', 'yes']:n            created_files = create_ai_docs_files(suggestions)n            print(f"\n✅ Created {len(created_files)} ai_docs files:")n            for file_path in created_files:n                print(f"  - {file_path}")n            n            print(f"\n📝 Next steps:")n            print(f"  1. Edit the created ai_docs files with your project's patterns")n            print(f"  2. Create your first PRP: cp PRPs/templates/prp_base.md PRPs/my-feature.md")n            print(f"  3. Reference the ai_docs in your PRP")n        else:n            print(f"\n💡 Run this command to create the suggested ai_docs:")n            print(f"  touch {' '.join([f'PRPs/ai_docs/{s}' for s in suggestions])}")n    else:n        print(f"\n💡 No specific ai_docs suggestions. Consider creating:")n        print(f"  - PRPs/ai_docs/general-patterns.md")n        print(f"  - PRPs/ai_docs/project-conventions.md")nnif __name__ == "__main__":n    main()